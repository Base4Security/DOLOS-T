# name: Build and Publish Package

# on:
#   release:
#     types: [published]

# jobs:
#   build:
#     runs-on: ubuntu-latest

#     steps:
#     - name: Checkout Repository
#       uses: actions/checkout@v2
      
#     - name: Set up Python
#       uses: actions/setup-python@v2
#       with:
#         python-version: '3.x'

#     - name: Install dependencies
#       run: pip install setuptools wheel twine

#     - name: Extract Version from Release Tag
#       id: extract_version
#       run: echo "::set-output name=version::${GITHUB_REF#refs/tags/}"

#     - name: Build Package
#       run: python setup.py sdist bdist_wheel
#       continue-on-error: true

#     - name: Verify Package Build
#       run: |
#         if [ -d "dist" ]; then
#           echo "Package was built successfully."
#         else
#           echo "Failed to build package."
#           exit 1
#         fi

#     # - name: Publish Package to PyPI
#     #   if: steps.extract_version.outputs.version != ''
#     #   env:
#     #     TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
#     #     TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
#     #   run: |
#     #     twine upload dist/*${{ steps.extract_version.outputs.version }}*


## Fix the issues with node.js version - TEST - 
name: Publish Python Package to PyPI

on:
  push:
    branches:
      - main  # or your default branch

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      - name: Fetch Version
        id: get_version
        run: |
          echo "PACKAGE_VERSION=$(python -c 'from src.DOLOST.version import __version__; print(__version__)')" >> $GITHUB_ENV
      
      - name: Build package
        run: |
          python setup.py sdist bdist_wheel

      - name: Print built files
        run: |
          ls -la dist/
      
      # - name: Publish package
      #   uses: pypa/gh-action-pypi-publish@master
      #   with:
      #     user: __token__
      #     password: ${{ secrets.PYPI_API_TOKEN }}
      #     packages_dir: dist
      #     package_version: ${{ env.PACKAGE_VERSION }}
